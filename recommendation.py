# -*- coding: utf-8 -*-
"""AGENTIC AI .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1peeX0OZ8q7oA1JrpcYcXcWkqeMBBp_7l
"""

class BreastCancerRecommendationAgent:
    def __init__(self):
        # Rule-based recommendations for breast cancer detection
        self.rules = {
            "age": {
                "<30": "Low Risk - Regular self-examinations and annual checkups recommended.",
                "30-50": "Moderate Risk - Mammograms every 2 years, maintain a healthy lifestyle.",
                ">50": "High Risk - Annual mammograms and regular checkups recommended."
            },
            "family_history": {
                "yes": "High Risk - Consider genetic testing and early screening.",
                "no": "Moderate Risk - Follow general screening guidelines."
            },
            "lifestyle": {
                "smoker": "Increased Risk - Avoid smoking, maintain a healthy diet, and exercise regularly.",
                "active": "Lower Risk - Continue with a healthy lifestyle and routine screenings.",
                "overweight": "Moderate Risk - Maintain a balanced diet and regular physical activity."
            },
            "symptoms": {
                "lump": "Immediate Concern - Consult a doctor for a mammogram and biopsy.",
                "pain": "Potential Risk - Monitor closely and consult a physician.",
                "none": "Low Risk - Continue regular checkups and screenings."
            }
        }

    def recommend(self, patient_data):
        recommendations = []

        for key, value in patient_data.items():
            if key in self.rules and value in self.rules[key]:
                recommendations.append(self.rules[key][value])

        return recommendations if recommendations else ["No specific recommendation found."]

# Example Usage
if __name__ == "__main__":
    agent = BreastCancerRecommendationAgent()
    patient_info = {
        "age": "30-50",
        "family_history": "yes",
        "lifestyle": "smoker",
        "symptoms": "lump"
    }
    recommendations = agent.recommend(patient_info)
    print("Personalized Recommendations:")
    for rec in recommendations:
        print("-", rec)

import pandas as pd

class BreastCancerDetectionAgent:
    """
    An agentic AI system for breast cancer detection recommendations, using a rule-based approach.
    """

    def __init__(self, data=None):
        """
        Initializes the agent.

        Args:
            data (pd.DataFrame, optional): Preprocessed breast cancer data. Defaults to None.
        """
        self.data = data
        self.rules = self._define_rules()

    def _define_rules(self):
        """
        Defines the rule-based logic for breast cancer detection.

        Returns:
            list: A list of rule functions.
        """

        def rule_age(row):
            """Rule based on age."""
            if row['age'] >= 50:
                return "Increased risk due to age. Consider mammography."
            elif 40 <= row['age'] < 50:
                return "Moderate risk. Discuss mammography with a doctor."
            else:
                return "Lower risk due to age. Regular self-exams recommended."

        def rule_family_history(row):
            """Rule based on family history."""
            if row['family_history'] == 'Yes':
                return "High risk due to family history. Genetic counseling and early screening recommended."
            else:
                return "No known family history of breast cancer."

        def rule_breast_density(row):
            """Rule based on breast density."""
            if row['breast_density'] == 'High':
                return "Increased risk. Additional screening (e.g., ultrasound) may be necessary."
            elif row['breast_density'] == 'Moderate':
                return "Moderate risk. Regular mammography and self-exams recommended."
            else:
                return "Lower risk related to breast density."

        def rule_lump(row):
            """Rule based on detected lumps."""
            if row['lump'] == 'Yes':
                return "Immediate medical evaluation required. Possible sign of breast cancer."
            else:
                return "No detected lumps."

        def rule_mammogram_results(row):
            """Rule based on prior mammogram results."""
            if row['mammogram_result'] == 'Suspicious':
                return "Immediate biopsy and further evaluation required."
            elif row['mammogram_result'] == 'Benign':
                return "Routine follow-up recommended."
            else:
                return "No prior mammogram results available."

        return [rule_age, rule_family_history, rule_breast_density, rule_lump, rule_mammogram_results]

    def process_data(self, data):
        """
        Processes the input data and generates recommendations.

        Args:
            data (pd.DataFrame): Input breast cancer data.

        Returns:
            pd.DataFrame: DataFrame with recommendations.
        """
        self.data = data
        recommendations = []
        for index, row in self.data.iterrows():
            row_recommendations = []
            for rule in self.rules:
                row_recommendations.append(rule(row))
            recommendations.append(row_recommendations)

        recommendations_df = pd.DataFrame(recommendations, columns=[rule.__name__.replace('rule_', '') for rule in self.rules])
        return pd.concat([self.data, recommendations_df], axis=1)

    def generate_recommendations(self, input_data):
        """
        Generates recommendations for a single input data point.

        Args:
            input_data (dict): A dictionary representing a single patient's data.

        Returns:
            dict: A dictionary of recommendations.
        """
        single_df = pd.DataFrame([input_data])
        results = self.process_data(single_df)
        recommendation_dict = {}
        for column in results.columns[len(input_data):]:
            recommendation_dict[column] = results[column].iloc[0]

        return recommendation_dict

# Example Usage:
if __name__ == "__main__":
    # Sample data (replace with your actual data)
    data = pd.DataFrame({
        'age': [45, 60, 35],
        'family_history': ['Yes', 'No', 'No'],
        'breast_density': ['High', 'Moderate', 'Low'],
        'lump': ['Yes', 'No', 'No'],
        'mammogram_result': ['Suspicious', 'Benign', 'N/A']
    })

    agent = BreastCancerDetectionAgent()
    recommendations = agent.process_data(data)
    print(recommendations)

    # Example single prediction
    single_patient = {'age': 52, 'family_history': 'Yes', 'breast_density': 'High', 'lump': 'No', 'mammogram_result': 'N/A'}
    single_recommendations = agent.generate_recommendations(single_patient)
    print("\nSingle Patient Recommendations:")
    print(single_recommendations)